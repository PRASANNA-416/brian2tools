language: c  # We are not using the Python infrastructure

env:
  global:
    secure: "p6RNmu9rnj3a02AfJjGn1kWhzgFS1xz9VmdMcT+dnBufKCiBqbWxtdjK5+7JHkX7we74zLfZtfXEwt+aovIlzkosjG27nwjcSiE+QSvwzApsPN7+rcUx0GRxds4A1lcJo5IlvLfnABRoojg/i/lkSgNd8CcwKhAIg2Xgp9kSChqtZ4hv2uBYxiS9JMGVM9FjHXFmskU2b//n824NHvhklKsjCyggzgh2eebw6cNzdbqNTiOytZI+TWK+Hhd2yPtPcxhkjv7PCV3zROgSDHioZh+j0d39kU0kCWYMSIeYUc9JKVnjPw5ooXCBiMd2OyoA8hllXQaGeEydH8Upx2pgBhEg2lhn+HUESHi9wOxXG/Eae5axugpNisusEWGDMFjeJg3sv7yjbWauDUb+3o+nr3H5CT8xpbU2dgHL9AR3T2VfO+8Hi6QZDh7txEdcqHFddUldzJajtXBySxJon//ll7B5sc4xUQqehGaXgY8OUH3bs2vdxwr+qM5URTyP/eaQYrIWIPOrJun+VTkFZvALMQDrDuGQkZIVYejDMZssDoCJ0XIf16veIDIbuXlEZkpWWzzn90zu65Z3C5n2T/Jl7OSHztCs40HH6KajcAFzBNCR1eJwY02pLEtQn4v82v85At4Q0zcbzkNwjGs7aAGVu7dlG/kRYhDASLLqA0swJGc="

os: linux
dist: xenial

jobs:
  include:
      # test that the documentation can be built from the tarball -- we
      # automatically build it from github master all the time, but downstream
      # packaging will use the tarball as the basis
    - python: "3.7"
      env: PYTHON="3.7" DOCS_ONLY=yes ARCHITECTURE="x86_64"
    # Tests with different Python versions
    - python: "3.6"
      env: PYTHON="3.6" CONDA_PY="36" BRIAN2_MASTER="false"
    - python: "3.8"
      env: PYTHON="3.8" CONDA_PY="38" BRIAN2_MASTER="false"
    - python: "3.6"
      env: PYTHON="3.6" CONDA_PY="36" BRIAN2_MASTER="true"
    - python: "3.8"
      env: PYTHON="3.8" CONDA_PY="38" BRIAN2_MASTER="true"
  allow_failures:
      - if: env(BRIAN2_MASTER)=false

# Use miniconda to install binary versions of numpy etc. from continuum
# analytic's repository. Follows an approach described by Dan Blanchard:
# https://gist.github.com/dan-blanchard/7045057
before_install:
- if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
  else
    wget http://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
  fi;
- chmod +x miniconda.sh
- ./miniconda.sh -b -p ~/miniconda
- export PATH=~/miniconda/bin:$PATH
# Update conda itself first
- conda update --quiet --yes conda
# Use conda-forge channel
- conda config --remove channels defaults
- conda config --add channels defaults
- conda config --add channels conda-forge
- if [[ $DOCS_ONLY == 'yes' ]]; then
    conda install --quiet --yes "sphinx>=1.7" setuptools_scm pip;
    python setup.py sdist;
  fi

# command to install dependencies
install:
  - if [[ $BRIAN2_MASTER == 'false' ]]; then
      conda install --yes --quiet anaconda-client conda-build;
    else
      conda install --yes --quiet -c conda-forge 'pylems >=0.4.9' 'matplotlib >=1.3.1' libneuroml pytest markdown_strings;
      pip install --quiet https://github.com/brian-team/brian2/archive/master.zip;
    fi

# Build documentation or build conda package and run tests
script:
- if [[ $DOCS_ONLY == 'yes' ]]; then
    cd dist;
    tar xvzf *.tar.gz;
    cd brian2tools*;
    mkdir docs;
    sphinx-build docs_sphinx docs;
  else
    export SRCDIR=$(pwd);
    if [[ $BRIAN2_MASTER == 'false' ]]; then
      conda build --quiet -c conda-forge dev/conda-recipe;
    else
      pip install .;
      cd;
      MPLBACKEND=Agg pytest --pyargs brian2tools;
    fi
  fi

after_success:
- cd $SRCDIR;
  if [[ $BRIAN2_MASTER == 'false' ]]; then
    python dev/continuous-integration/conda-server-push.py;
  fi

notifications:
  email: false